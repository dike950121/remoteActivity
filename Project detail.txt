I am working on a cyber security graduation project that generates a payload for remote access. It involves developing a Windows-based payload with specific remote access features such as file transfer, command execution, and screen sharing.

1. The project should consist of two major parts: a CLIENT-side SPY BOT written in C++ and a SERVER-side project written in WPF .NET that can manage multiple SPY BOTs.
2. When running, SPY BOT should not need to load other libraries.
3. Do not run SPY BOT with administrator privileges.
4. SPY BOT should search SERVER at regular intervals using DDNS and search repeatedly even if search fails. If connected to SERVER and then disconnected from server, search should be performed again.
5. SPY BOTs that have already been infiltrated should be able to check the update status of SPY BOT when connecting to server and automatically download and update themselves from server if necessary.
6. SPY BOT should be able to execute commands sent by the server on the device.
7. SPY BOT should track all events occurring on the device (e.g. keyboard events, file transfers, copy and paste, executable files, URLs and COOKIES accessed via browsers, etc.) and store them in a file on the device by date and time, and provide them upon request from the server.
8. It should operate from a network perspective, allowing malware to spread laterally or target Active Directory.
9. It should send a signal confirming that the user is using the device.
10. The server should be able to control the screen and files of the device on which SPY BOT is running.
11. It should be able to control two or more devices (e.g. 100,000 devices).
12. It should bypass all security protections (e.g. VirusTotal).
13. It should hide itself when clicked. 3. Nothing should be displayed on the screen, such as CMD or running with administrator rights.
14. It cannot be deleted from the device even through the task manager. However, it should be deleted only by the command from the server side.
15. The source code should be encrypted (base64, hex, etc.) so that it cannot be deciphered or viewed (to prevent reverse engineering).
16. It is stored in the kernel.